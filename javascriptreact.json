{
  "el": {
    "prefix": "el",
    "body": [
      "<${1:div}$2>$0</${1:div}>"
    ]
  },
  "jest_test": {
    "prefix": ["jest_test", "jest", "test"],
    "body": [
      "import ${1:mything} from '${2:mything}';",
      "",
      "describe('${3:something()}', () => {",
      "  it('should ${4:do something}', () => {",
      "    ${5:expect(something()).toBe([]);}",
      "  });",
      "});",
    ]
  },
  "react_class": {
    "prefix": ["react_class"],
    "description": "",
    "body": [
      "import React, { Component } from 'react';",
      "",
      "class ${1:ComponentName} extends Component {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t$0",
      "\t\t\t</div>",
      "\t\t);",
      "\t}",
      "}",
      "",
      "export default ${1:ComponentName};"
    ]
  },
  "react_component": {
    "prefix": ["react_component", "comp", "component"],
    "description": "",
    "body": [
      "import React from 'react';",
      "",
      "const ${1:componentName} = () => {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t);",
      "};",
      "",
      "export default ${1:componentName};"
    ]
  },
  "react_use_effect": {
    "prefix": ["react_use_effect", "use_effect"],
    "description": "",
    "body": [
      "useEffect(() => {",
      "  someAsyncCall(); ",
      "}, [myDep])"
    ]
  },
  "react_use_state": {
    "prefix": ["react_use_state", "use_state"],
    "description": "",
    "body": [
      "const [${1:name}, set${1:name}] = useState(${2:defaultValue});"
    ]
  },
  "react_use_memo": {
    "prefix": ["react_use_memo", "use_memo"],
    "body": [
      "const ${1:name} = useMemo(() => ${3:computation}, [${2:dependency}])"
    ]
  },
  "react_use_ref": {
    "prefix": ["react_use_ref", "use_ref"],
    "body": [
      "const ${1:myVar} = useRef(${2:null});"
    ]
  },
  "react_use_callback": {
    "prefix": ["react_use_callback", "use_callback"],
    "body": [
      "const ${1:memoizedCallback} = useCallback(",
      "\t() => ${2:doSomething()},",
      "\t[${3:myDep}],",
      ");"
    ]
  },
  "cname": {
    "prefix": ["cls", "cname", "class", "class_name"],
    "body": [
      "className={${1:thingClass}}"
    ]
  },
  "cname_cond": {
    "prefix": ["cname_cond", "ccond", "class_cond", "class_condition"],
    "body": [
      "className={`${${1:condition} ? ${2:thingClass} : ''`}"
    ]
  },
  "shallow_renderer": {
    "prefix": ["import_shallow_renderer", "import_shallow", "i_shallow", "shallow"],
    "body": [
      "import ShallowRenderer from 'react-test-renderer/shallow';"
    ]
  },
  "jest_snapshot": {
    "prefix": ["snapshot", "jest_snapshot", "shallow_snapshot"],
    "body": [
      "const renderer = new ShallowRenderer();",
      "const result = renderer.render(<${1:MyComp} />);",
      "expect(result).toMatchSnapshot();"
    ]
  },
  "class_as": {
    "prefix": "class_as",
    "body": [
      "${1:MyClass} as ${1:MyClass}Class"
    ]
  },
  "import_css": {
    "prefix": ["import_css", "import_module_css", "i_css"],
    "body": [
      "import ${1:{mything as mythingClass}} from './${2:mything}.module.css';"
    ]
  },
  "import_react": {
    "prefix": ["import_react", "react", "ir"],
    "body": [
      "import React from 'react';"
    ]
  },
  "import_link": {
    "prefix": ["import_link", "link", "il", "router"],
    "body": [
      "import {Link} from 'react-router-dom';"
    ]
  },
  "import_react_intl": {
    "prefix": ["import_react_intl", "i_intl"],
    "body": [
      "import {FormattedMessage} from 'react-intl';"
    ]
  },
  "import_react_intl_provider": {
    "prefix": ["import_react_intl_provider", "i_intl_provider"],
    "body": [
      "import {IntlProvider} from 'react-intl'"
    ]
  },
  "import_from": {
    "prefix": ["import_from", "import", "i"],
    "body": [
      "import {${1:thing}} from '${2:library}';"
    ]
  },
  "intl_provider": {
    "prefix": "intl_provider",
    "body": [
      "<IntlProvider>$0</IntlProvider>"
    ]
  },
  "intl_msg": {
    "prefix": "intl_msg",
    "body": [
      "<FormattedMessage id=\"${1:app.greeting}\" defaultMessage=\"${2:My message}\" />",
    ]
  },
  "msg": {
    "prefix": ["msg", "formatted_msg"],
    "body": [
      "<FormattedMessage id=\"${1:app.greeting}\" defaultMessage=\"${2:My message}\" />",
    ]
  },
  "intl_inject": {
    "prefix": "intl_inject",
    "body": [
      "injectIntl(${1:MyComp})"
    ]
  },
  "intl_get_msg": {
    "prefix": ["intl_get_msg", "intl_get_format_msg"],
    "body": [
      "intl: {formatMessage}"
    ]
  },
  "msg_attr": {
    "prefix": ["msg_attr", "format_msg"],
    "body": [
      "formatMessage({id: '${1:app.greeting}', defaultMessage: '${2:My message}'})"
    ]
  },
  "redux_connect": {
    "prefix": "connect",
    "body": "import {connect} from 'react-redux';\n\nconst Connected${1} = connect(state => ({\n\n}), dispatch => ({\n\n}))(${1});\n\nexport default Connected${1};"
  },
  "mocha_describe": {
    "prefix": "mocha_describe",
    "body": "describe('${1}', () => {\n\t\n});"
  },
  "mocha_it": {
    "prefix": "mocha_it",
    "body": "it('should ${1:do something}', () => {\n\t\n});"
  },
  "jest_expect": {
    "prefix": ["jest_expect", "expect"],
    "body": "expect(${1:myThing()}).toBe(${2:someOutput})"
  },
  "jest_expect_object": {
    "prefix": ["jest_expect_object", "expect_object"],
    "body": "expect(${1:myThing()}).toMatchObject(${2:{myObj}});"
  },
  "jest_describe": {
    "prefix": ["jest_describe", "describe"],
    "body": "describe('${1:myThing()}', () => {$0});"
  },
  "jest_it": {
    "prefix": ["jest_it", "it"],
    "description": "",
    "body": [
      "it('should ${1:do something}', () => {",
      "  $0",
      "});"
    ]
  },
  "mocha_test": {
    "prefix": "mocha_test",
    "body": "import testSetup from '../testutil/testSetup';\nimport React from 'react';\n\n// import thing from './place';\n\nconst {expect, shallow, mount, createStore, fetchMock, waitForAction} = testSetup;\n\ndescribe('ProfileEditDetails tests', () => {\n\tdescribe('businessNameNotInPersonalName', () => {\n\t\tit('empty personal name should be ok', () => {\n\t\t\texpect(businessNameNotInPersonalName('', '', 'Alpha Building')).to.be.ok;\n\t\t});\n\t});\n});\n"
  },
  "dynamo_get": {
    "prefix": "dynamo_get",
    "body": [
      "const result = await docClient",
      ".get({",
      "  TableName: TEMPLATES_TABLE,",
      "  Key: {",
      "    id,",
      "    tenantId",
      "  }",
      "})",
      ".promise();",
      "",
      "if (result && result.Item) doSomething();"
    ]
  },
  "dynamo_create_table": {
    "prefix": "dynamo_create_table",
    "description": "",
    "body": [
      "await dynamodb",
      "    .createTable({",
      "      TableName: TEMPLATES_TABLE,",
      "      KeySchema: [{AttributeName: 'tenantId', KeyType: 'HASH'}, {AttributeName: 'id', KeyType: 'RANGE'}],",
      "      AttributeDefinitions: [",
      "        {AttributeName: 'tenantId', AttributeType: 'S'},",
      "        {AttributeName: 'id', AttributeType: 'S'}",
      "      ],",
      "      ProvisionedThroughput: {",
      "        ReadCapacityUnits: 5,",
      "        WriteCapacityUnits: 5",
      "      }",
      "    })",
      "    .promise();"
    ]
  },
  "dynamo_delete_table": {
    "prefix": "dynamo_delete_table",
    "description": "",
    "body": [
      "await dynamodb.deleteTable({TableName: TEMPLATES_TABLE}).promise();"
    ]
  },
  "dynamo_list_tables": {
    "prefix": "dynamo_list_tables",
    "description": "",
    "body": [
      "await dynamodb.listTables({}).promise();"
    ]
  },
  "dynamo_connect": {
    "prefix": "dynamo_connect",
    "description": "",
    "body": [
      "const AWS = require('aws-sdk');",
      "",
      "AWS.config.update({",
      "  region: 'us-west-2',",
      "  endpoint: 'http://localhost:8000',",
      "  accessKeyId: 'fakeMyKeyId',",
      "  secretAccessKey: 'fakeSecretAccessKey'",
      "});",
      "",
      "const TEMPLATES_TABLE = 'DesignerTemplates';",
      "const dynamodb = new AWS.DynamoDB();",
      "const docClient = new AWS.DynamoDB.DocumentClient();"
    ]
  },
  "joi_schema": {
    "prefix": "joi_schema",
    "description": "",
    "body": [
      "const nodeSchema = Joi.object().keys({",
      "  name: Joi.string().required(),",
      "  props: Joi.object()",
      "    .pattern(Joi.string(), Joi.string())",
      "    .optional(),",
      "  children: Joi.array()",
      "    .items(Joi.object())",
      "    .optional(),",
      "  text: Joi.string().optional()",
      "});"
    ]
  },
  "joi_require": {
    "prefix": "joi_require",
    "description": "",
    "body": [
      "const Joi = require('@hapi/joi');"
    ]
  },
  "joi_validate": {
    "prefix": "joi_validate",
    "description": "",
    "body": [
      "const result = Joi.validate(node, nodeSchema);",
      "",
      "  if (result.error) throw new InvalidTemplate(result.error);"
    ]
  },
  "express_app": {
    "prefix": "express_app",
    "description": "",
    "body": [
      "const express = require('express')",
      "",
      "const app = express();",
      "const port = process.env.PORT || 3000;",
      "",
      "app.use(express.json());",
      "app.use(express.urlencoded());",
      "app.use(morgan('tiny'));",
      "",
      "app.listen(port, () => console.log(`report-designer-api listening on port ${port}!`));"
    ]
  },
  "express_route": {
    "prefix": "express_route",
    "body": [
      "app.get('/foo/:id', (req, res) => res.send({foo: 'bar'}));"
    ]
  },
  "cdk_app": {
    "prefix": "cdk_app",
    "body": [
      "import cdk = require('@aws-cdk/core');",
      "",
      "// ## CDK Quick ref: ",
      "// npm install -g aws-cdk ",
      "// cdk --version ",
      "// cdk init --language LANGUAGE [TEMPLATE] ",
      "// cdk init --language javascript ",
      "// cdk init --language python sample-app ",
      "// cdk ls ",
      "// cdk diff ",
      "// cdk deploy MyStack ",
      "// cdk destroy ",
      "",
      "const app = new cdk.App();",
      "new MyStack(app, 'MyStack');",
      "app.synth();"
    ]
  },
  "cdk_stack": {
    "prefix": "cdk_stack",
    "body": [
      "import cdk = require('@aws-cdk/core');",
      "",
      "export class LambdaCronStack extends cdk.Stack {",
      "  constructor(app: cdk.App, id: string) {",
      "    super(app, id);",
      "    ",
      "    // Do things",
      "  }"
    ]
  },
  "cdk_lambda": {
    "prefix": "cdk_lambda",
    "body": [
      "import lambda = require('@aws-cdk/aws-lambda');",
      "",
      "const lambdaFn = new lambda.Function(this, 'Singleton', { ",
      "  code: new lambda.InlineCode(fs.readFileSync('lambda-handler.py', { encoding: 'utf-8' })),",
      "  handler: 'index.main',",
      "  timeout: cdk.Duration.seconds(300),",
      "  runtime: lambda.Runtime.PYTHON_2_7",
      "});"
    ]
  },
  "cdk_events_lambda": {
    "prefix": "cdk_events_lambda",
    "body": [
      "import events = require('@aws-cdk/aws-events');",
      "import targets = require('@aws-cdk/aws-events-targets');",
      "",
      "const rule = new events.Rule(this, 'Rule', {",
      "  schedule: events.Schedule.expression('cron(0 18 ? * MON-FRI *)')",
      "});",
      "",
      "rule.addTarget(new targets.LambdaFunction(lambdaFn));"
    ]
  },
  "cdk_bucket": {
    "prefix": "cdk_bucket",
    "body": [
      "import s3 = require('@aws-cdk/aws-s3');",
      "//...",
      "const siteBucket = new s3.Bucket(this, 'SiteBucket', {",
      "  bucketName: siteDomain,",
      "  websiteIndexDocument: 'index.html',",
      "  websiteErrorDocument: 'error.html',",
      "  publicReadAccess: true,",
      "  removalPolicy: cdk.RemovalPolicy.DESTROY,",
      "});"
    ]
  },
  "cdk_bucket_deploy": {
    "prefix": "cdk_bucket_deploy",
    "body": [
      "import s3deploy = require('@aws-cdk/aws-s3-deployment');",
      "//...",
      "new s3deploy.BucketDeployment(this, 'DeployWithInvalidation', {",
      "  source: s3deploy.Source.asset('./site-contents'),",
      "  destinationBucket: siteBucket,",
      "  distribution,",
      "  distributionPaths: ['/*'],",
      "});"
    ]
  },
  "cdk_acm": {
    "prefix": "cdk_acm",
    "body": [
      "import acm = require('@aws-cdk/aws-certificatemanager');",
      "//...",
      "const certificateArn = new acm.DnsValidatedCertificate(this, 'SiteCertificate', {",
      "  domainName: siteDomain,",
      "  hostedZone: zone",
      "}).certificateArn;"
    ]
  },
  "cdk_cloudfront": {
    "prefix": "cdk_cloudfront",
    "body": [
      "import cloudfront = require('@aws-cdk/aws-cloudfront');",
      "",
      "const distribution = new cloudfront.CloudFrontWebDistribution(this, 'SiteDistribution', {",
      "  aliasConfiguration: {",
      "    acmCertRef: certificateArn,",
      "    names: [ siteDomain ],",
      "    sslMethod: cloudfront.SSLMethod.SNI,",
      "    securityPolicy: cloudfront.SecurityPolicyProtocol.TLS_V1_1_2016,",
      "  },",
      "  originConfigs: [",
      "    {",
      "      s3OriginSource: {",
      "        s3BucketSource: siteBucket",
      "      },",
      "      behaviors : [ {isDefaultBehavior: true}],",
      "    }",
      "  ]",
      "});"
    ]
  },
}