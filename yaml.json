{
	"cfn_validate": {
		"prefix": [
			"cfn_validate",
			"cfn_validate_template"
		],
		"description": "CFN; Validate Template",
		"body": [
			"# aws cloudformation validate-template --profile myprofile --template-body file://./template.yml"
		]
	},
	"cfn_inline_lambda": {
		"prefix": [
			"cfn_inline_lambda",
			"cfn_lambda"
		],
		"description": "CFN; Inline Lambda Function",
		"body": [
			"HelloWorldLambdaFunction:\n    Type: AWS::Lambda::Function\n    Properties:\n      Runtime: python3.7\n      Handler: index.lambda_handler\n      Code:\n        ZipFile: |\n          import json\n          def lambda_handler(event, context):\n              return {\n                  'statusCode': 200,\n                  'body': json.dumps('Hello World!')\n              }"
		]
	},
	"cfn_lambda_custom_resource": {
		"prefix": [
			"cfn_lambda_custom_resource"
		],
		"description": "CFN: Lambda Custom Resource",
		"body": [
			"DescribeOrganizationFunction:\n  Type: AWS::Lambda::Function\n  Properties:\n    Runtime: python3.7\n    Handler: index.lambda_handler\n    Code:\n      ZipFile: |\n        import json\n        import boto3\n        import cfnresponse\n        client = boto3.client('organizations')\n\n        def lambda_handler(event, context):\n          response = client.describe_organization()\n          cfnresponse.send(event, context, cfnresponse.SUCCESS, response['Organization'] if response and response['Organization'] else {})"
		]
	},
	"cfn_execution_role": {
		"prefix": [
			"cfn_execution_role",
			"cfn_role"
		],
		"description": "CFN: IAM role for lambda execution",
		"body": [
			"DescribeOrganizationExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n        - Effect: Allow\n          Principal:\n            Service:\n            - lambda.amazonaws.com\n          Action:\n          - sts:AssumeRole\n      Path: "/"\n      Policies:\n      - PolicyName: root\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n          - Effect: Allow\n            Action:\n              - logs:CreateLogGroup\n              - logs:CreateLogStream\n              - logs:PutLogEvents\n            Resource: arn:aws:logs:*:*:*\n          - Effect: Allow\n            Action:\n              - organizations:DescribeOrganization \n            Resource: "*""
		]
	},
	"cfn_template": {
		"prefix": [
			"cfn_template"
		],
		"description": "CFN: Empty template",
		"body": [
			"AWSTemplateFormatVersion: \"2010-09-09\"\nDescription: A sample template\n\nParameters:\n\nResources:\n"
		]
	},
	"cfn_parameter": {
		"prefix": [
			"cfn_parameter"
		],
		"description": "CFN: Parameter",
		"body": [
			"  TestParameter: \n    Type: String\n    Default: t2.micro\n    AllowedValues: \n      - t2.micro\n      - m1.small\n      - m1.large\n    Description: Enter t2.micro, m1.small, or m1.large. Default is t2.micro."
		]
	},
	"cfn_tags": {
		"prefix": [
			"cfn_tags"
		],
		"description": "CFN: Standard tags",
		"body": [
			"Tags:\n        - Key: RepositoryUrl\n          Value: \"my-repository\"\n        - Key: Version\n          Value: \"1.0\"\n        - Key: Creator\n          Value: \"creator-here\"\n        - Key: Owner\n          Value: \"owner-here\"\n        - Key: Stack\n          Value: \"Environment here e.g. Prod etc\"\n        - Key: Project\n          Value: \"my-project-name\""
		]
	},
	"cfn_custom": {
		"prefix": [
			"cfn_custom"
		],
		"description": "CFN: Custom resource",
		"body": [
			"MyFrontEndTest: \n    Type: \"Custom::PingTester\"\n    Version: \"1.0\"\n    Properties: \n      ServiceToken: \"arn:aws:sns:us-east-1:84969EXAMPLE:CRTest\" # Lambda ARN or SNS ARN\n      key1: string\n      key2: \n        - list\n      key3: \n        key4: map"
		]
	},
	"cfn_nested": {
		"prefix": [
			"cfn_nested",
			"cfn_nested_stack",
			"cfn_stack"
		],
		"description": "CFN: Nested stack",
		"body": [
			"MyNestedStack:\n    Type: AWS::CloudFormation::Stack\n    Properties: \n      TemplateURL: \"https://s3.amazonaws.com/my-cloudformation-templates-us-east-2/myTemplate.template\"\n      Parameters: \n        Key: Value\n      Tags: \n        - Key: RepositoryUrl\n          Value: \"my-repository\"\n        - Key: Version\n          Value: \"1.0\"\n        - Key: Creator\n          Value: \"creator-here\"\n        - Key: Owner\n          Value: \"owner-here\"\n        - Key: Stack\n          Value: \"Environment here e.g. Prod etc\"\n        - Key: Project\n          Value: \"my-project-name\""
		]
	},
	"cfn_code_build": {
		"prefix": [
			"cfn_code_build",
			"cfn_codebuild"
		],
		"description": "CFN: CodeBuild",
		"body": [
			"MyCodeBuild:\n  Type: AWS::CodeBuild::Project\n  Properties:\n      Name: My-CodeBuild\n      ServiceRole: !GetAtt MyCodeBuildRole.Arn\n      Source:\n        Type: CODEPIPELINE\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        Image: \"aws/codebuild/standard: 3.0\"\n        Type: LINUX_CONTAINER\n      Artifacts:\n        Type: CODEPIPELINE"
		]
	},
	"buildspec": {
		"prefix": [
			"buildspec",
			"codebuild_spec"
		],
		"description": "CodeBuild Spec (buildspec.yml)",
		"body": [
			"version: 0.2\n\nphases:\n  install:\n    runtime-versions:\n      nodejs: 10\n    commands:\n      - ./install.sh\n  build:\n    commands:\n      - ./build.sh\n  post_build:\n    commands:\n      - ./dist.sh\n        \nartifacts:\n  base-directory: .\n  name: my-build-thing\n  files:\n    - dist/**/*"
		]
	},
	"cfn_sub": {
		"prefix": [
			"cfn_sub",
			"cfn_substitute"
		],
		"description": "CFN: Substitute",
		"body": [
			"!Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:vpc/${vpc}'"
		]
	},
	"cfn_region": {
		"prefix": [
			"cfn_region"
		],
		"description": "CFN: Region pseudo parameter",
		"body": [
			"AWS::Region"
		]
	},
	"cfn_account": {
		"prefix": [
			"cfn_account"
		],
		"description": "CFN: Account pseudo parameter",
		"body": [
			"AWS::AccountId"
		]
	},
	"cfn_policy_document": {
		"prefix": [
			"cfn_policy_document"
		],
		"description": "CFN: Policy document",
		"body": [
			"PolicyDocument:\n    Version: 2012-10-17\n    Statement:\n      - Effect: Allow\n        Action:\n          - 'cloudformation:Describe*'\n          - 'cloudformation:List*'\n          - 'cloudformation:Get*'\n        Resource: '*'"
		]
	},
	"cfn_assume_role_policy_document": {
		"prefix": [
			"cfn_assume_role_policy_document"
		],
		"description": "CFN: Assume role policy document",
		"body": [
			"AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n              - ec2.amazonaws.com\n            Action:\n              - 'sts:AssumeRole'"
		]
	},
	"cfn_getatt": {
		"prefix": [
			"cfn_getatt",
			"cfn_get_att"
		],
		"description": "CFN: Get Attribute",
		"body": [
			"!GetAtt GuardDutyOrganizationMembersFunctionRole.Arn"
		]
	},
	"cfn_policy_logs": {
		"prefix": [
			"cfn_policy_logs",
			"cfn_create_logs"
		],
		"description": "CFN: IAM Policy to create logs",
		"body": [
			"- Effect: \"Allow\"\n                Action:\n                  - \"logs:CreateLogGroup\"\n                  - \"logs:CreateLogStream\"\n                  - \"logs:PutLogEvents\"\n                Resource: \"*\""
		]
	},
	"cfn_codepipeline_cfn_action": {
		"prefix": [
			"cfn_codepipeline_cloudformation_action",
			"cfn_codepipeline_cfn_action"
		],
		"description": "CFN: CodePipeline CFN Deploy action",
		"body": [
			"Name: ExecuteChangeSet",
			"ActionTypeId:",
			"  Category: Deploy",
			"  Owner: AWS",
			"  Provider: CloudFormation",
			"  Version: '1'",
			"RunOrder: 2",
			"Configuration:",
			"  ActionMode: CHANGE_SET_EXECUTE",
			"  Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND",
			"  ChangeSetName: pipeline-changeset",
			"  ParameterOverrides: '{\"ProjectId\": \"my-project\",\"CodeDeployRole\": \"CodeDeploy_Role_ARN\"}'",
			"  RoleArn: CloudFormation_Role_ARN",
			"  StackName: my-project--lambda",
			"  TemplateConfiguration: 'my-project--BuildArtifact::template-configuration.json'",
			"  TemplatePath: 'my-project--BuildArtifact::template-export.yml'",
			"OutputArtifacts: []",
			"InputArtifacts:",
			"  - Name: my-project-BuildArtifact",
		]
	},
	"cfn_codepipeline_codebuild_action": {
		"prefix": [
			"cfn_codepipeline_codebuild_action"
		],
		"description": "CFN: CodePipeline CodeBuild Action",
		"body": [
			"- Name: PackageExport",
			"  ActionTypeId:",
			"    Category: Build",
			"    Owner: AWS",
			"    Provider: CodeBuild",
			"    Version: '1'",
			"  RunOrder: 1",
			"  Configuration:",
			"    ProjectName: my-build-project",
			"    PrimarySource: MyApplicationSource1",
			"    EnvironmentVariables: '[{\"name\":\"TEST_VARIABLE\",\"value\":\"TEST_VALUE\",\"type\":\"PLAINTEXT\"}]'",
			"  OutputArtifacts:",
			"    - Name: MyPipeline-BuildArtifact",
			"  InputArtifacts:",
			"    - Name: MyApplicationSource1",
			"    - Name: MyApplicationSource2",
		]
	},
	"cfn_codepipeline_codecommit_action": {
		"prefix": [
			"cfn_codepipeline_codecommit_action"
		],
		"description": "",
		"body": [
			"- Name: Source",
			"  OutputArtifacts:",
			"    - Name: Artifact_MyWebsiteStack",
			"  InputArtifacts: []",
			"  Name: source",
			"  Configuration:",
			"    RepositoryName: MyWebsite",
			"    BranchName: mainline",
			"    PollForSourceChanges: 'false'",
			"  RunOrder: 1",
			"  ActionTypeId:",
			"    Version: '1'",
			"    Provider: CodeCommit",
			"    Category: Source",
			"    Owner: AWS",
		],
	},
}